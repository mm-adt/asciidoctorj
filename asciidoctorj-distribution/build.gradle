apply plugin: 'application'

// if (project.statusIsRelease) {
//    apply from: rootProject.file('gradle/sdkman.gradle')
// }

dependencies {
  compile(project(':asciidoctorj')) {
    exclude group: 'org.jruby'
  }

  compile(project(':asciidoctorj-api')) {
    transitive = false
  }

  compile("org.asciidoctor:asciidoctorj-epub3:$asciidoctorjEpub3Version") {
    transitive = false
  }
  compile("org.asciidoctor:asciidoctorj-diagram:$asciidoctorjDiagramVersion") {
    transitive = false
  }
  compile("org.asciidoctor:asciidoctorj-pdf:$asciidoctorjPdfVersion") {
    transitive = false
  }
  compile "org.jruby:jruby-complete:$jrubyVersion"
  testCompile project(':asciidoctorj-arquillian-extension')
  testCompile "org.apache.pdfbox:pdfbox:$pdfboxVersion"
}

jar.enabled = false
if ( !project.hasProperty('skip.signing') ) {
  signPom.enabled = false
}

configurations.archives.with {
  //We need to remove the (non-existing) jar artifact, otherwise signing will fail
  artifacts.removeAll{ it.type.equals("jar") }
}

tasks.withType(AbstractArchiveTask) {
  baseName rootProject.name
  classifier 'bin' // use classifier for identification in repository list
  eachFile { it.path = it.path.replaceFirst('-bin(?=/)', '') }
  //destinationDir = ...
}

startScripts {
  unixStartScriptGenerator.template = resources.text.fromFile('src/main/resources/customUnixStartScript.txt')

  applicationName = rootProject.name
  mainClassName = 'org.asciidoctor.cli.AsciidoctorInvoker'
  defaultJvmOpts = [
    '-client', '-Xmn128m', '-Xms256m', '-Xmx256m',
    '-Xverify:none', '-XX:+TieredCompilation', '-XX:TieredStopAtLevel=1', '-XX:+DisableExplicitGC', '-Djruby.compile.mode=OFF'
  ]
}

artifacts {
  archives distZip
}
