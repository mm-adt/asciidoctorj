apply plugin: 'osgi'

dependencies {
  compile project(path: ':asciidoctorj-api')
  compile "org.jruby:jruby:$jrubyVersion"
  compile "com.beust:jcommander:$jcommanderVersion"
  gems "rubygems:asciidoctor:$asciidoctorGemVersion"
  gems "rubygems:coderay:$coderayGemVersion"
  gems "rubygems:erubis:$erubisGemVersion"
  gems "rubygems:haml:$hamlGemVersion"
  gems "rubygems:open-uri-cached:$openUriCachedGemVersion"
  gems "rubygems:slim:$slimGemVersion"
  gems "rubygems:thread_safe:$threadSafeGemVersion"
  gems "rubygems:tilt:$tiltGemVersion"
  gems "rubygems:concurrent-ruby:$concurrentRubyGemVersion"
  // TODO could use dependency replacement feature to fix version of Saxon-HE
  testCompile("org.xmlmatchers:xml-matchers:$xmlMatchersVersion") { exclude module: 'Saxon-HE' }
  testCompile "net.sf.saxon:Saxon-HE:$saxonVersion"
  testCompile "com.google.guava:guava:$guavaVersion"
  testCompile "org.jsoup:jsoup:$jsoupVersion"
  testCompile "io.netty:netty-all:$nettyVersion"
  testCompile project(path: ':asciidoctorj-arquillian-extension')
}

def gemFiles = fileTree(jruby.gemInstallDir) {
  include 'specifications/*.gemspec'
  include 'gems/*/lib/**'
  include "gems/asciidoctor-*/data/**"
}

jrubyPrepare {  
  doLast {
    copy {
      from '/home/smallette/git/mm-adt/coderay/bin'
      into 'build/gems/gems/coderay-1.1.0/bin'      
    }
    copy {
      from '/home/smallette/git/mm-adt/coderay/lib'
      into 'build/gems/gems/coderay-1.1.0/lib'      
    }
    copy {
      from '/home/smallette/git/mm-adt/coderay/test'
      into 'build/gems/gems/coderay-1.1.0/test'      
    }
    copy { // bundles the gems inside this artifact
      from gemFiles
      into preparedGems
    }
  }
}

javadoc {
  classpath = sourceSets.main.output + sourceSets.main.compileClasspath + project(':asciidoctorj-test-support').sourceSets.test.output

  source(project(':asciidoctorj-api').sourceSets.main.allJava)
}

//jruby {
//	execVersion = '1.7.20'
//}

jar {
  manifest {
    symbolicName = 'org.asciidoctor'
    instruction 'Export-Package',
      "org.asciidoctor;version=\"${version}\"",
      "org.asciidoctor.ast;version=\"${version}\"",
      "org.asciidoctor.converter;version=\"${version}\"",
      "org.asciidoctor.converter.spi;version=\"${version}\"",
      "org.asciidoctor.extension;version=\"${version}\"",
      "org.asciidoctor.extension.spi;version=\"${version}\""
    instruction 'Import-Package',
      'com.beust.jcommander;resolution:=optional',
      '*'
  }
}

test {
  useJUnit {
    excludeCategories 'org.asciidoctor.categories.Polluted'
  }
}

task pollutedTest(type: Test) {
  useJUnit {
    includeCategories 'org.asciidoctor.categories.Polluted'
  }
  forkEvery = 10
  minHeapSize = '128m'
  maxHeapSize = '1024m'
  if (JavaVersion.current().isJava8Compatible()) {
    jvmArgs '-XX:-UseGCOverheadLimit'
  }
  else {
    jvmArgs '-XX:MaxPermSize=256m', '-XX:-UseGCOverheadLimit'
  }

  environment 'GEM_PATH', '/some/path'
  environment 'GEM_HOME', '/some/other/path'

  testLogging {
    // events 'passed', 'failed', 'skipped', 'standard_out', 'standard_error'
    // events 'standard_out', 'standard_error'
    afterSuite { desc, result ->
      if (!desc.parent && logger.infoEnabled) {
        logger.info "Test results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
      }
    }
  }

  reports {
    html {
      destination file("$buildDir/reports/pollutedTest")
    }
    junitXml {
      destination file("$buildDir/pollutedTest-result")
    }
  }
}

test.dependsOn pollutedTest

